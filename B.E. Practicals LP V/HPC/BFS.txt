#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Simple Graph class with adjacency list
class Graph {
public:
    int numVertices;
    vector<vector<int>> adjList;

    Graph(int vertices) {
        numVertices = vertices;
        adjList.resize(vertices);
    }

    // Add an undirected edge
    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
};

// Parallel BFS using OpenMP
vector<int> parallelBFS(Graph &graph, int start) {
    int V = graph.numVertices;
    vector<bool> visited(V, false);  // Keep track of visited nodes
    vector<int> level(V, -1);        // Distance (or level) from the source

    vector<int> currentFrontier;     // Nodes to explore at current level
    vector<int> nextFrontier;        // Nodes to explore at next level

    visited[start] = true;
    level[start] = 0;
    currentFrontier.push_back(start);

    int currentLevel = 1;

    while (!currentFrontier.empty()) {
        nextFrontier.clear();

        // Parallel region starts here
        #pragma omp parallel
        {
            vector<int> localBuffer;

            #pragma omp for schedule(dynamic)
            for (int i = 0; i < currentFrontier.size(); i++) {
                int u = currentFrontier[i];
                
                for (int neighbor : graph.adjList[u]) {
                    bool visitNow = false;

                    // Critical section to check/update visited
                    #pragma omp critical
                    {
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            level[neighbor] = currentLevel;
                            visitNow = true;
                        }
                    }

                    if (visitNow) {
                        localBuffer.push_back(neighbor);
                    }
                }
            }

            // Merge local buffers into nextFrontier
            #pragma omp critical
            {
                nextFrontier.insert(nextFrontier.end(), localBuffer.begin(), localBuffer.end());
            }
        }

        // Move to next level
        currentFrontier = nextFrontier;
        currentLevel++;
    }

    return level;
}

int main() {
    int numVertices = 8;
    Graph g(numVertices);

    // Adding edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);
    g.addEdge(4, 7);

    int source = 0;

    double startTime = omp_get_wtime(); // Start timer

    vector<int> distances = parallelBFS(g, source);

    double endTime = omp_get_wtime(); // End timer

    // Output distances
    cout << "BFS Levels (distance from source " << source << "):\n";
    for (int i = 0; i < numVertices; i++) {
        cout << "Vertex " << i << ": Level " << distances[i] << '\n';
    }

    cout << "Time taken: " << (endTime - startTime) << " seconds\n";

    return 0;
}



//g++ -fopenmp parallel_dfs.cpp -o parallel_dfs

//cout << "Using " << omp_get_max_threads() << " threads\n";