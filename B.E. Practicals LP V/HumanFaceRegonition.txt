import os
import cv2
import numpy as np
import face_recognition

# Ensure you have installed dependencies:
# pip install opencv-python face_recognition

# 1. Load known faces and their names
known_face_encodings = []
known_face_names = []
known_faces_dir = 'known_faces'  # Directory containing images named like 'Alice.jpg', 'Bob.png', etc.

for filename in os.listdir(known_faces_dir):
    if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
        name = os.path.splitext(filename)[0]
        image_path = os.path.join(known_faces_dir, filename)
        image = face_recognition.load_image_file(image_path)
        encodings = face_recognition.face_encodings(image)
        if encodings:
            known_face_encodings.append(encodings[0])
            known_face_names.append(name)

# 2. Initialize video capture (webcam)
video_capture = cv2.VideoCapture(0)

# 3. Process frames in real time
while True:
    ret, frame = video_capture.read()
    if not ret:
        break

    # Resize frame for faster processing
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    # Convert BGR (OpenCV) to RGB (face_recognition)
    rgb_small = small_frame[:, :, ::-1]

    # Detect face locations and encodings in the current frame
    face_locations = face_recognition.face_locations(rgb_small)
    face_encodings = face_recognition.face_encodings(rgb_small, face_locations)

    face_names = []
    for face_encoding in face_encodings:
        # Compare against known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = 'Unknown'

        # Use the closest match
        distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        best_idx = np.argmin(distances)
        if matches[best_idx]:
            name = known_face_names[best_idx]
        face_names.append(name)

    # Display results
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Scale back face coordinates
        top *= 4; right *= 4; bottom *= 4; left *= 4
        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        # Draw a label below the face
        cv2.rectangle(frame, (left, bottom - 25), (right, bottom), (0, 255, 0), cv2.FILLED)
        cv2.putText(frame, name, (left + 6, bottom - 6),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)

    cv2.imshow('Webcam - Press Q to exit', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
video_capture.release()
cv2.destroyAllWindows()
